<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AuraSound - Visualisez votre aura émotionnelle</title>
    <link href="https://fonts.googleapis.com/css2?family=Quicksand:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    
    <!-- Meta tags pour les réseaux sociaux -->
    <meta property="og:title" content="AuraSound - Visualisez votre aura émotionnelle">
    <meta property="og:description" content="Découvrez et partagez votre aura émotionnelle avec une expérience musicale personnalisée.">
    <meta property="og:image" content="aura_logo.png">
    <meta property="og:type" content="website">
    <meta name="twitter:card" content="summary_large_image">
    
    <style>
        :root {
            --primary-color: #6366f1;
            --background: #f8fafc;
            --card-bg: rgba(255, 255, 255, 0.7);
            --shadow: rgba(0, 0, 0, 0.1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Quicksand', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        /* Arrière-plan dynamique */
        @keyframes gradientBackground {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }
        
        body {
            background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);
            background-size: 400% 400%;
            animation: gradientBackground 15s ease infinite;
            color: #1e293b;
            min-height: 100vh;
            padding: 2rem;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
        }

        /* Mise en page en deux colonnes */
        .dashboard {
            display: flex;
            flex-direction: column;
            gap: 2rem;
        }
        
        .two-column-container {
            display: grid;
            grid-template-columns: 1fr 1fr; /* Deux colonnes de taille égale */
            gap: 2rem;
            width: 100%;
        }

        header {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        h1 {
            font-size: 2.5rem;
            font-weight: 700;
            color: #1e293b;
            margin-bottom: 0.5rem;
        }

        .subtitle {
            color: #ffffff;
            font-size: 1.1rem;
            margin-bottom: 2rem;
        }

        /* Amélioration des cartes glass */
        .glass-card {
            background: rgba(255, 255, 255, 0.6);
            border-radius: 1rem;
            padding: 2rem;
            box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.15);
            backdrop-filter: blur(12px);
            -webkit-backdrop-filter: blur(12px);
            border: 1px solid rgba(255, 255, 255, 0.18);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
            height: auto;
            display: flex;
            flex-direction: column;
        }
        
        .glass-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 12px 40px 0 rgba(31, 38, 135, 0.25);
        }

        .input-container {
            display: flex;
            flex-direction: column;
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .input-row {
            display: flex;
            gap: 1rem;
            flex-wrap: wrap;
        }

        input, button, select {
            padding: 0.75rem 1rem;
            border-radius: 0.5rem;
            border: 1px solid #e2e8f0;
            font-size: 1rem;
        }

        input, select {
            flex: 1;
            min-width: 200px;
            background-color: rgba(255, 255, 255, 0.8);
        }

        input:focus, select:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(99, 102, 241, 0.2);
        }

        button {
            background-color: var(--primary-color);
            color: white;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.2);
        }

        button:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 8px -1px rgba(0, 0, 0, 0.3);
        }

        .logo-container {
            display: flex;
            align-items: center;
            margin-right: 20px;
        }

        .logo {
            width: 100px;
            height: 100px;
            object-fit: contain;
            border-radius: 50%;
            transition: transform 0.3s ease;
            outline: none;
            border: none;
        }

        .logo:focus {
            outline: none;
            border: none;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

        /* Emotions grid */
        .emotions-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
            gap: 1rem;
            margin-top: 1rem;
        }

        .emotion-card {
            background: rgba(255, 255, 255, 0.5);
            border-radius: 0.8rem;
            padding: 1rem;
            cursor: pointer;
            text-align: center;
            transition: all 0.3s ease;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .emotion-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.15);
        }

        .emotion-card.active {
            border: 2px solid #6366f1;
            transform: scale(1.05);
        }

        .emotion-icon {
            font-size: 2rem;
            margin-bottom: 0.5rem;
        }

        /* Sliders */
        .slider-container {
            margin-top: 1rem;
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .slider-group {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .slider-group label {
            font-weight: 500;
            display: flex;
            justify-content: space-between;
        }

        .slider-value {
            background: rgba(255, 255, 255, 0.7);
            padding: 0.2rem 0.5rem;
            border-radius: 0.3rem;
            font-size: 0.9rem;
        }

        input[type="range"] {
            width: 100%;
            -webkit-appearance: none;
            height: 0.5rem;
            border-radius: 0.25rem;
            background: rgba(255, 255, 255, 0.5);
            outline: none;
        }

        input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 1.2rem;
            height: 1.2rem;
            border-radius: 50%;
            background: var(--primary-color);
            cursor: pointer;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
            transition: all 0.2s ease;
        }

        input[type="range"]::-webkit-slider-thumb:hover {
            transform: scale(1.1);
            box-shadow: 0 3px 7px rgba(0, 0, 0, 0.3);
        }

        /* Aura Visualization */
        .aura-container {
            position: relative;
            width: 100%;
            height: 400px;
            display: flex;
            justify-content: center;
            align-items: center;
            margin-top: 1rem;
        }

        .aura-svg {
            position: absolute;
            width: 100%;
            height: 100%;
            top: 0;
            left: 0;
        }

        .aura-figure {
            position: relative;
            z-index: 2;
        }

        .music-controls {
            display: flex;
            justify-content: center;
            gap: 1rem;
            margin-top: 1rem;
        }

        .music-btn {
            width: 3rem;
            height: 3rem;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.2rem;
            transition: all 0.3s ease;
            background-color: rgba(255, 255, 255, 0.7);
            color: #1e293b;
        }

        .music-btn:hover {
            transform: scale(1.1);
            background-color: var(--primary-color);
            color: white;
        }

        .music-btn.active {
            background-color: var(--primary-color);
            color: white;
        }

        .aura-info {
            text-align: center;
            margin-top: 1rem;
        }

        .aura-title {
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
        }

        .aura-description {
            font-size: 1rem;
            color: #4b5563;
            line-height: 1.5;
        }

        /* Questionnaire */
        .questionnaire {
            display: none;
            animation: fadeIn 0.5s ease;
        }

        .question-card {
            background: rgba(255, 255, 255, 0.8);
            padding: 1.5rem;
            border-radius: 1rem;
            margin-bottom: 1rem;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }

        .question-title {
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 1rem;
        }

        .answer-options {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }

        .answer-option {
            padding: 0.8rem 1rem;
            background: rgba(255, 255, 255, 0.5);
            border-radius: 0.5rem;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .answer-option:hover {
            background: rgba(255, 255, 255, 0.8);
            transform: translateX(5px);
        }

        .answer-option.selected {
            background: rgba(99, 102, 241, 0.2);
            border-left: 3px solid var(--primary-color);
        }

        .questionnaire-controls {
            display: flex;
            justify-content: space-between;
            margin-top: 1rem;
        }

        /* Social Share */
        .social-share-bar {
            position: fixed;
            left: 20px;
            top: 50%;
            transform: translateY(-50%);
            display: flex;
            flex-direction: column;
            gap: 0.8rem;
            z-index: 100;
        }
        
        .social-share-button {
            width: 3rem;
            height: 3rem;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            cursor: pointer;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            transition: all 0.3s ease;
            border: none;
            font-size: 1.2rem;
        }
        
        .social-share-button:hover {
            transform: translateY(-5px) scale(1.1);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.3);
        }
        
        .x-button {
            background-color: #000000;
        }
        
        .facebook-button {
            background-color: #4267B2;
        }
        
        .instagram-button {
            background: linear-gradient(45deg, #405DE6, #5851DB, #833AB4, #C13584, #E1306C, #FD1D1D, #F56040, #F77737, #FCAF45, #FFDC80);
        }
        
        .whatsapp-button {
            background-color: #25D366;
        }
        
        .linkedin-button {
            background-color: #0077B5;
        }
        
        .email-button {
            background-color: #DB4437;
        }
        
        .copy-link-button {
            background-color: #6366f1;
        }

        /* Animation */
        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes pulse {
            0% {
                transform: scale(1);
                opacity: 1;
            }
            50% {
                transform: scale(1.05);
                opacity: 0.8;
            }
            100% {
                transform: scale(1);
                opacity: 1;
            }
        }

        @keyframes float {
            0% {
                transform: translateY(0) rotate(0deg);
            }
            50% {
                transform: translateY(-10px) rotate(5deg);
            }
            100% {
                transform: translateY(0) rotate(0deg);
            }
        }

        /* Tutorial Overlay */
        .tutorial-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.7);
            z-index: 1000;
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.3s ease;
        }
        
        .tutorial-overlay.active {
            opacity: 1;
            pointer-events: all;
        }
        
        .tutorial-container {
            max-width: 500px;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 1rem;
            padding: 2rem;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            position: relative;
            overflow: hidden;
        }
        
        .tutorial-step {
            display: none;
        }
        
        .tutorial-step.active {
            display: block;
            animation: fadeIn 0.5s forwards;
        }
        
        .tutorial-header {
            margin-bottom: 1.5rem;
            border-bottom: 1px solid rgba(0, 0, 0, 0.1);
            padding-bottom: 1rem;
        }
        
        .tutorial-header h2 {
            color: #333;
            margin-bottom: 0.5rem;
        }
        
        .tutorial-body {
            margin-bottom: 2rem;
        }
        
        .tutorial-footer {
            display: flex;
            justify-content: space-between;
        }
        
        .tutorial-btn {
            padding: 0.5rem 1rem;
            border-radius: 0.5rem;
            border: none;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.2s ease;
        }
        
        .tutorial-btn.next {
            background-color: #6366f1;
            color: white;
        }
        
        .tutorial-btn.prev {
            background-color: #e5e7eb;
            color: #4b5563;
        }
        
        .tutorial-btn.finish {
            background-color: #10b981;
            color: white;
        }
        
        .tutorial-progress {
            display: flex;
            justify-content: center;
            margin-top: 1.5rem;
            gap: 0.5rem;
        }
        
        .progress-dot {
            width: 0.8rem;
            height: 0.8rem;
            border-radius: 50%;
            background-color: #d1d5db;
            transition: all 0.2s ease;
        }
        
        .progress-dot.active {
            background-color: #6366f1;
            transform: scale(1.2);
        }

        /* Loading Animation */
        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 2000;
            opacity: 0;
            pointer-events: none;
            transition: opacity 0.3s ease;
        }

        .loading-overlay.active {
            opacity: 1;
            pointer-events: all;
        }

        .loader {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            border: 5px solid rgba(255, 255, 255, 0.2);
            border-top-color: var(--primary-color);
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            to {
                transform: rotate(360deg);
            }
        }

        /* Responsive */
        @media (max-width: 992px) {
            .two-column-container {
                grid-template-columns: 1fr;
            }
        }

        @media (max-width: 768px) {
            body {
                padding: 1rem;
            }
            
            .dashboard {
                width: 100%;
                margin: 0 auto;
                padding: 0;
            }
            
            .glass-card {
                padding: 1.5rem;
            }
            
            .input-row {
                flex-direction: column;
            }
            
            header {
                flex-direction: column;
                align-items: center;
                text-align: center;
                padding-top: 4rem;
            }
            
            header .logo-container {
                margin: 0 auto 1rem auto;
            }
            
            .emotions-grid {
                grid-template-columns: repeat(3, 1fr);
            }
            
            .social-share-bar {
                position: fixed;
                left: 0;
                top: auto;
                bottom: 0;
                width: 100%;
                flex-direction: row;
                justify-content: center;
                background-color: rgba(255, 255, 255, 0.8);
                backdrop-filter: blur(5px);
                padding: 0.6rem 0;
                box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.1);
                transform: translateY(100%);
                gap: 0.5rem;
            }
            
            .social-share-bar.visible {
                transform: translateY(0);
            }
            
            .toggle-share-button {
                position: fixed;
                bottom: 20px;
                left: 20px;
                width: 3rem;
                height: 3rem;
                border-radius: 50%;
                background-color: #6366f1;
                color: white;
                display: flex;
                align-items: center;
                justify-content: center;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
                z-index: 991;
                border: none;
                cursor: pointer;
                transition: all 0.3s ease;
            }
        }

        @media (max-width: 480px) {
            .emotions-grid {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .glass-card {
                padding: 1rem;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="dashboard">
            <header>
                <div class="logo-container">
                    <img src="https://via.placeholder.com/100" alt="Logo AuraSound" class="logo" id="aura-logo">
                </div>
                <div>
                    <h1>AuraSound</h1>
                    <p class="subtitle">Visualisez votre aura émotionnelle</p>
                </div>
            </header>
            
            <!-- Conteneur à deux colonnes -->
            <div class="two-column-container">
                <!-- Colonne de gauche : Configuration de l'aura -->
                <section class="glass-card">
                    <div class="input-container">
                        <h2>Découvrez votre aura</h2>
                        <div class="input-row">
                            <button id="quick-mode" class="active">Mode rapide</button>
                            <button id="questionnaire-mode">Questionnaire</button>
                        </div>
                    </div>
                    
                    <!-- Mode rapide : sélection directe d'émotions -->
                    <div id="quick-selection" class="mode-section">
                        <h3>Sélectionnez votre état émotionnel</h3>
                        <div class="emotions-grid">
                            <div class="emotion-card" data-emotion="joy" data-color="#FFD700">
                                <div class="emotion-icon">😊</div>
                                <div>Joie</div>
                            </div>
                            <div class="emotion-card" data-emotion="love" data-color="#FF69B4">
                                <div class="emotion-icon">❤️</div>
                                <div>Amour</div>
                            </div>
                            <div class="emotion-card" data-emotion="calm" data-color="#87CEEB">
                                <div class="emotion-icon">😌</div>
                                <div>Calme</div>
                            </div>
                            <div class="emotion-card" data-emotion="energy" data-color="#FF4500">
                                <div class="emotion-icon">⚡</div>
                                <div>Énergie</div>
                            </div>
                            <div class="emotion-card" data-emotion="focus" data-color="#9370DB">
                                <div class="emotion-icon">🔍</div>
                                <div>Concentration</div>
                            </div>
                            <div class="emotion-card" data-emotion="creativity" data-color="#32CD32">
                                <div class="emotion-icon">🎨</div>
                                <div>Créativité</div>
                            </div>
                            <div class="emotion-card" data-emotion="sadness" data-color="#6495ED">
                                <div class="emotion-icon">😢</div>
                                <div>Tristesse</div>
                            </div>
                            <div class="emotion-card" data-emotion="anxiety" data-color="#DDA0DD">
                                <div class="emotion-icon">😰</div>
                                <div>Anxiété</div>
                            </div>
                            <div class="emotion-card" data-emotion="anger" data-color="#DC143C">
                                <div class="emotion-icon">😠</div>
                                <div>Colère</div>
                            </div>
                        </div>
                        
                        <div class="slider-container">
                            <div class="slider-group">
                                <label for="intensity-slider">
                                    Intensité 
                                    <span id="intensity-value" class="slider-value">5</span>
                                </label>
                                <input type="range" id="intensity-slider" min="1" max="10" value="5">
                            </div>
                            <div class="slider-group">
                                <label for="complexity-slider">
                                    Complexité 
                                    <span id="complexity-value" class="slider-value">5</span>
                                </label>
                                <input type="range" id="complexity-slider" min="1" max="10" value="5">
                            </div>
                            <div class="slider-group">
                                <label for="movement-slider">
                                    Mouvement 
                                    <span id="movement-value" class="slider-value">5</span>
                                </label>
                                <input type="range" id="movement-slider" min="1" max="10" value="5">
                            </div>
                        </div>
                        
                        <button id="generate-aura" class="generate-btn" style="margin-top: 1.5rem">Générer mon aura</button>
                    </div>
                    
                    <!-- Mode questionnaire -->
                    <div id="questionnaire" class="questionnaire">
                        <div class="question-card active-question" data-question="1">
                            <div class="question-title">Comment vous sentez-vous en ce moment même ?</div>
                            <div class="answer-options">
                                <div class="answer-option" data-score="joy:3,energy:2">Joyeux(se) et plein(e) d'énergie</div>
                                <div class="answer-option" data-score="calm:3,focus:2">Calme et concentré(e)</div>
                                <div class="answer-option" data-score="love:3,joy:1">Aimant(e) et chaleureux(se)</div>
                                <div class="answer-option" data-score="creativity:3,energy:1">Inspiré(e) et créatif(ve)</div>
                                <div class="answer-option" data-score="sadness:3">Triste ou mélancolique</div>
                                <div class="answer-option" data-score="anxiety:3,energy:1">Stressé(e) ou anxieux(se)</div>
                                <div class="answer-option" data-score="anger:3,energy:2">Frustré(e) ou en colère</div>
                            </div>
                        </div>
                        
                        <div class="question-card" data-question="2">
                            <div class="question-title">Dans quel environnement vous trouvez-vous ?</div>
                            <div class="answer-options">
                                <div class="answer-option" data-score="calm:2,focus:1">Un espace calme et confortable</div>
                                <div class="answer-option" data-score="energy:2,creativity:1">Un lieu animé et stimulant</div>
                                <div class="answer-option" data-score="focus:2,anxiety:1">Un environnement de travail</div>
                                <div class="answer-option" data-score="joy:2,love:1">Entouré(e) de proches</div>
                                <div class="answer-option" data-score="calm:1,sadness:1">Seul(e) à la maison</div>
                                <div class="answer-option" data-score="anxiety:2,energy:1">Un endroit bruyant ou stressant</div>
                                <div class="answer-option" data-score="creativity:2,joy:1">Dans la nature</div>
                            </div>
                        </div>
                        
                        <div class="question-card" data-question="3">
                            <div class="question-title">Quel résultat souhaitez-vous obtenir avec votre aura ?</div>
                            <div class="answer-options">
                                <div class="answer-option" data-score="calm:3,anxiety:-2">Apaiser mon stress</div>
                                <div class="answer-option" data-score="energy:3,sadness:-2">Gagner en énergie</div>
                                <div class="answer-option" data-score="focus:3,creativity:1">Améliorer ma concentration</div>
                                <div class="answer-option" data-score="creativity:3,focus:1">Stimuler ma créativité</div>
                                <div class="answer-option" data-score="joy:3,sadness:-2">Me sentir plus heureux(se)</div>
                                <div class="answer-option" data-score="calm:2,anger:-2">Gérer ma colère</div>
                                <div class="answer-option" data-score="love:3,joy:1">Renforcer mes liens avec les autres</div>
                            </div>
                        </div>
                        
                        <div class="question-card" data-question="4">
                            <div class="question-title">Quel type de musique préférez-vous généralement ?</div>
                            <div class="answer-options">
                                <div class="answer-option" data-score="joy:2,energy:2">Musique rythmée et entraînante</div>
                                <div class="answer-option" data-score="calm:3,focus:1">Sons relaxants et mélodies douces</div>
                                <div class="answer-option" data-score="creativity:2,focus:1">Musique instrumentale ou classique</div>
                                <div class="answer-option" data-score="love:2,joy:1">Chansons d'amour et mélodies romantiques</div>
                                <div class="answer-option" data-score="sadness:2,calm:1">Mélodies mélancoliques ou nostalgiques</div>
                                <div class="answer-option" data-score="focus:2,creativity:1">Sons de la nature ou ambiances</div>
                                <div class="answer-option" data-score="energy:2,anger:1">Rock ou métal intense</div>
                            </div>
                        </div>
                        
                        <div class="questionnaire-controls">
                            <button id="prev-question" class="tutorial-btn prev" disabled>Précédent</button>
                            <div class="question-counter">Question 1/4</div>
                            <button id="next-question" class="tutorial-btn next">Suivant</button>
                        </div>
                        
                        <button id="complete-questionnaire" class="generate-btn" style="margin-top: 1.5rem; display: none;">Générer mon aura</button>
                    </div>
                </section>
                
                <!-- Colonne de droite : Visualisation de l'aura -->
                <section class="glass-card">
                    <h2>Votre aura émotionnelle</h2>
                    
                    <div class="aura-container">
                        <svg class="aura-svg" id="aura-visualization" viewBox="0 0 400 400">
                            <!-- SVG généré dynamiquement par JavaScript -->
                            <defs>
                                <radialGradient id="auraGradient" cx="50%" cy="50%" r="50%" fx="50%" fy="50%">
                                    <stop offset="0%" stop-color="#FFFFFF" stop-opacity="0.8"/>
                                    <stop offset="80%" stop-color="#CCCCCC" stop-opacity="0.5"/>
                                    <stop offset="100%" stop-color="#AAAAAA" stop-opacity="0"/>
                                </radialGradient>
                                <filter id="glow" x="-50%" y="-50%" width="200%" height="200%">
                                    <feGaussianBlur stdDeviation="10" result="blur"/>
                                    <feComposite in="SourceGraphic" in2="blur" operator="over"/>
                                </filter>
                            </defs>
                            <g id="aura-layers">
                                <circle cx="200" cy="200" r="70" fill="url(#auraGradient)" filter="url(#glow)" opacity="0.7"/>
                            </g>
                            <circle cx="200" cy="200" r="40" fill="#FFFFFF" filter="url(#glow)" class="aura-figure"/>
                        </svg>
                    </div>
                    
                    <div class="aura-info">
                        <h3 class="aura-title">Aura en attente</h3>
                        <p class="aura-description">Sélectionnez une émotion ou complétez le questionnaire pour générer votre aura personnalisée, accompagnée d'une ambiance sonore harmonisée.</p>
                    </div>
                    
                    <div class="music-controls">
                        <button class="music-btn" id="play-music" title="Jouer la musique">
                            <i class="fas fa-play"></i>
                        </button>
                        <button class="music-btn" id="pause-music" title="Mettre en pause" style="display: none;">
                            <i class="fas fa-pause"></i>
                        </button>
                        <button class="music-btn" id="volume-down" title="Diminuer le volume">
                            <i class="fas fa-volume-down"></i>
                        </button>
                        <button class="music-btn" id="volume-up" title="Augmenter le volume">
                            <i class="fas fa-volume-up"></i>
                        </button>
                        <button class="music-btn" id="share-aura" title="Partager mon aura">
                            <i class="fas fa-share-alt"></i>
                        </button>
                    </div>
                </section>
            </div>
        </div>
    </div>

    <!-- Barre de partage sociale -->
    <div class="social-share-bar">
        <button class="social-share-button x-button" id="x-share" title="Partager sur X">
            <i class="fab fa-x-twitter"></i>
        </button>
        <button class="social-share-button facebook-button" id="facebook-share" title="Partager sur Facebook">
            <i class="fab fa-facebook-f"></i>
        </button>
        <button class="social-share-button instagram-button" id="instagram-share" title="Partager sur Instagram">
            <i class="fab fa-instagram"></i>
        </button>
        <button class="social-share-button whatsapp-button" id="whatsapp-share" title="Partager sur WhatsApp">
            <i class="fab fa-whatsapp"></i>
        </button>
        <button class="social-share-button linkedin-button" id="linkedin-share" title="Partager sur LinkedIn">
            <i class="fab fa-linkedin-in"></i>
        </button>
        <button class="social-share-button email-button" id="email-share" title="Partager par email">
            <i class="fas fa-envelope"></i>
        </button>
        <button class="social-share-button copy-link-button" id="copy-link" title="Copier le lien">
            <i class="fas fa-link"></i>
        </button>
    </div>

    <!-- Tutoriel interactif -->
    <div class="tutorial-overlay" id="tutorial-overlay">
        <div class="tutorial-container">
            <div class="tutorial-step active" data-step="1">
                <div class="tutorial-header">
                    <h2>Bienvenue sur AuraSound !</h2>
                    <p>Découvrez comment visualiser votre aura émotionnelle</p>
                </div>
                <div class="tutorial-body">
                    <p>AuraSound vous permet de visualiser votre état émotionnel sous forme d'une aura colorée personnalisée, accompagnée d'une ambiance sonore adaptée. Ce bref tutoriel vous guidera à travers les fonctionnalités principales.</p>
                </div>
                <div class="tutorial-footer">
                    <button class="tutorial-btn skip" onclick="closeTutorial()">Passer</button>
                    <button class="tutorial-btn next" onclick="nextStep()">Suivant</button>
                </div>
            </div>
            
            <div class="tutorial-step" data-step="2">
                <div class="tutorial-header">
                    <h2>Choisissez votre mode</h2>
                </div>
                <div class="tutorial-body">
                    <p>Vous pouvez découvrir votre aura de deux façons : le mode rapide pour sélectionner directement une émotion, ou le questionnaire pour une analyse plus précise de votre état émotionnel.</p>
                </div>
                <div class="tutorial-footer">
                    <button class="tutorial-btn prev" onclick="prevStep()">Précédent</button>
                    <button class="tutorial-btn next" onclick="nextStep()">Suivant</button>
                </div>
            </div>
            
            <div class="tutorial-step" data-step="3">
                <div class="tutorial-header">
                    <h2>Personnalisez votre aura</h2>
                </div>
                <div class="tutorial-body">
                    <p>Ajustez l'intensité, la complexité et le mouvement de votre aura à l'aide des curseurs. Ces paramètres influenceront l'apparence visuelle et l'ambiance sonore générées.</p>
                </div>
                <div class="tutorial-footer">
                    <button class="tutorial-btn prev" onclick="prevStep()">Précédent</button>
                    <button class="tutorial-btn next" onclick="nextStep()">Suivant</button>
                </div>
            </div>
            
            <div class="tutorial-step" data-step="4">
                <div class="tutorial-header">
                    <h2>Visualisez votre aura</h2>
                </div>
                <div class="tutorial-body">
                    <p>Après avoir généré votre aura, observez la visualisation colorée qui reflète votre état émotionnel. Chaque couleur et forme a une signification spécifique liée à vos émotions.</p>
                </div>
                <div class="tutorial-footer">
                    <button class="tutorial-btn prev" onclick="prevStep()">Précédent</button>
                    <button class="tutorial-btn next" onclick="nextStep()">Suivant</button>
                </div>
            </div>
            
            <div class="tutorial-step" data-step="5">
                <div class="tutorial-header">
                    <h2>Écoutez votre ambiance sonore</h2>
                </div>
                <div class="tutorial-body">
                    <p>Une musique adaptée à votre état émotionnel accompagne votre aura. Utilisez les contrôles audio pour ajuster le volume et mettre en pause ou reprendre la lecture.</p>
                </div>
                <div class="tutorial-footer">
                    <button class="tutorial-btn prev" onclick="prevStep()">Précédent</button>
                    <button class="tutorial-btn next" onclick="nextStep()">Suivant</button>
                </div>
            </div>
            
            <div class="tutorial-step" data-step="6">
                <div class="tutorial-header">
                    <h2>Partagez votre aura</h2>
                </div>
                <div class="tutorial-body">
                    <p>Partagez votre aura émotionnelle sur les réseaux sociaux pour faire découvrir cette expérience à vos amis et votre entourage.</p>
                </div>
                <div class="tutorial-footer">
                    <button class="tutorial-btn prev" onclick="prevStep()">Précédent</button>
                    <button class="tutorial-btn finish" onclick="closeTutorial()">Terminer</button>
                </div>
            </div>
            
            <div class="tutorial-progress">
                <div class="progress-dot active" data-step="1"></div>
                <div class="progress-dot" data-step="2"></div>
                <div class="progress-dot" data-step="3"></div>
                <div class="progress-dot" data-step="4"></div>
                <div class="progress-dot" data-step="5"></div>
                <div class="progress-dot" data-step="6"></div>
            </div>
        </div>
    </div>

    <!-- Loading overlay -->
    <div class="loading-overlay" id="loading-overlay">
        <div class="loader"></div>
    </div>

    <!-- Ajouter un bouton pour réafficher le tutoriel -->
    <button id="help-button" style="position: fixed; bottom: 20px; right: 20px; padding: 0.5rem 1rem; border-radius: 0.5rem; background-color: #6366f1; color: white; border: none; cursor: pointer; z-index: 1000; font-weight: 600; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);">
        <i class="fas fa-question-circle"></i> Aide
    </button>

    <script>
        // Émotions et leurs configurations d'aura
        const emotionConfigs = {
            joy: {
                name: "Joie",
                description: "Une aura rayonnante et chaleureuse qui reflète votre bonheur et votre optimisme.",
                colors: ["#FFD700", "#FFA500", "#FFFF00"],
                baseRadius: 80,
                pulseFactor: 1.2,
                complexity: 8,
                musicUrl: "joy.mp3"
            },
            love: {
                name: "Amour",
                description: "Une aura douce et chaleureuse qui exprime votre affection et votre bienveillance.",
                colors: ["#FF69B4", "#FF1493", "#FFC0CB"],
                baseRadius: 85,
                pulseFactor: 1.1,
                complexity: 7,
                musicUrl: "love.mp3"
            },
            calm: {
                name: "Calme",
                description: "Une aura sereine et apaisante qui reflète votre tranquillité d'esprit.",
                colors: ["#87CEEB", "#ADD8E6", "#B0E0E6"],
                baseRadius: 75,
                pulseFactor: 1.05,
                complexity: 5,
                musicUrl: "calm.mp3"
            },
            energy: {
                name: "Énergie",
                description: "Une aura dynamique et vibrante qui exprime votre vitalité et votre enthousiasme.",
                colors: ["#FF4500", "#FF8C00", "#FFA07A"],
                baseRadius: 90,
                pulseFactor: 1.3,
                complexity: 9,
                musicUrl: "energy.mp3"
            },
            focus: {
                name: "Concentration",
                description: "Une aura précise et stable qui reflète votre attention et votre détermination.",
                colors: ["#9370DB", "#8A2BE2", "#E6E6FA"],
                baseRadius: 70,
                pulseFactor: 1.05,
                complexity: 6,
                musicUrl: "focus.mp3"
            },
            creativity: {
                name: "Créativité",
                description: "Une aura colorée et fluide qui exprime votre imagination et votre inspiration.",
                colors: ["#32CD32", "#00FA9A", "#98FB98"],
                baseRadius: 85,
                pulseFactor: 1.15,
                complexity: 10,
                musicUrl: "creativity.mp3"
            },
            sadness: {
                name: "Tristesse",
                description: "Une aura bleue et ondulante qui reflète votre mélancolie, mais aussi votre profondeur émotionnelle.",
                colors: ["#6495ED", "#4682B4", "#B0C4DE"],
                baseRadius: 65,
                pulseFactor: 1.1,
                complexity: 4,
                musicUrl: "sadness.mp3"
            },
            anxiety: {
                name: "Anxiété",
                description: "Une aura fluctuante qui reflète votre tension intérieure, mais qui peut être apaisée par la musique adaptée.",
                colors: ["#DDA0DD", "#BA55D3", "#D8BFD8"],
                baseRadius: 75,
                pulseFactor: 1.25,
                complexity: 7,
                musicUrl: "anxiety.mp3"
            },
            anger: {
                name: "Colère",
                description: "Une aura intense qui exprime votre frustration, mais qui peut être canalisée positivement.",
                colors: ["#DC143C", "#B22222", "#CD5C5C"],
                baseRadius: 90,
                pulseFactor: 1.3,
                complexity: 8,
                musicUrl: "anger.mp3"
            }
        };

        // Variables globales
        let currentEmotion = null;
        let audioPlayer = null;
        let audioVolume = 0.5;
        let currentQuestionIndex = 1;
        let questionnaireScores = {};
        let auraSvg = document.getElementById('aura-visualization');
        let auraLayers = document.getElementById('aura-layers');
        let animationIntervals = [];

        // Initialisation
        document.addEventListener('DOMContentLoaded', function() {
            // Sélection des éléments du DOM
            const quickModeBtn = document.getElementById('quick-mode');
            const questionnaireBtn = document.getElementById('questionnaire-mode');
            const quickSelection = document.getElementById('quick-selection');
            const questionnaire = document.getElementById('questionnaire');
            const emotionCards = document.querySelectorAll('.emotion-card');
            const intensitySlider = document.getElementById('intensity-slider');
            const complexitySlider = document.getElementById('complexity-slider');
            const movementSlider = document.getElementById('movement-slider');
            const intensityValue = document.getElementById('intensity-value');
            const complexityValue = document.getElementById('complexity-value');
            const movementValue = document.getElementById('movement-value');
            const generateBtn = document.getElementById('generate-aura');
            const playMusicBtn = document.getElementById('play-music');
            const pauseMusicBtn = document.getElementById('pause-music');
            const volumeUpBtn = document.getElementById('volume-up');
            const volumeDownBtn = document.getElementById('volume-down');
            const shareAuraBtn = document.getElementById('share-aura');
            const nextQuestionBtn = document.getElementById('next-question');
            const prevQuestionBtn = document.getElementById('prev-question');
            const completeQuestionnaireBtn = document.getElementById('complete-questionnaire');
            const questionCounter = document.querySelector('.question-counter');
            const helpButton = document.getElementById('help-button');
            
            // Initialisation de l'audio
            audioPlayer = new Audio();
            audioPlayer.volume = audioVolume;
            
            // Gestion des modes (rapide / questionnaire)
            quickModeBtn.addEventListener('click', function() {
                quickModeBtn.classList.add('active');
                questionnaireBtn.classList.remove('active');
                quickSelection.style.display = 'block';
                questionnaire.style.display = 'none';
            });
            
            questionnaireBtn.addEventListener('click', function() {
                questionnaireBtn.classList.add('active');
                quickModeBtn.classList.remove('active');
                questionnaire.style.display = 'block';
                quickSelection.style.display = 'none';
                
                // Réinitialiser le questionnaire
                resetQuestionnaire();
            });
            
            // Sélection d'une émotion
            emotionCards.forEach(card => {
                card.addEventListener('click', function() {
                    // Retirer la classe active de toutes les cartes
                    emotionCards.forEach(c => c.classList.remove('active'));
                    
                    // Ajouter la classe active à la carte cliquée
                    this.classList.add('active');
                    
                    // Mettre à jour l'émotion courante
                    currentEmotion = this.getAttribute('data-emotion');
                    
                    // Mettre à jour la couleur du bouton Générer
                    const emotionColor = this.getAttribute('data-color');
                    generateBtn.style.backgroundColor = emotionColor;
                });
            });
            
            // Gestion des sliders
            intensitySlider.addEventListener('input', function() {
                intensityValue.textContent = this.value;
            });
            
            complexitySlider.addEventListener('input', function() {
                complexityValue.textContent = this.value;
            });
            
            movementSlider.addEventListener('input', function() {
                movementValue.textContent = this.value;
            });
            
            // Génération de l'aura
            generateBtn.addEventListener('click', function() {
                if (!currentEmotion) {
                    alert("Veuillez sélectionner une émotion");
                    return;
                }
                
                // Afficher l'overlay de chargement
                const loadingOverlay = document.getElementById('loading-overlay');
                loadingOverlay.classList.add('active');
                
                // Simuler un court délai pour l'analyse émotionnelle
                setTimeout(() => {
                    try {
                        const intensity = parseInt(intensitySlider.value);
                        const complexity = parseInt(complexitySlider.value);
                        const movement = parseInt(movementSlider.value);
                        
                        generateAura(currentEmotion, intensity, complexity, movement);
                    } catch (error) {
                        console.error("Erreur lors de la génération de l'aura:", error);
                    } finally {
                        // S'assurer que l'overlay de chargement est toujours masqué même en cas d'erreur
                        loadingOverlay.classList.remove('active');
                    }
                }, 1500);
            });
            
            // Gestion du questionnaire
            nextQuestionBtn.addEventListener('click', function() {
                const currentQuestion = document.querySelector(`.question-card[data-question="${currentQuestionIndex}"]`);
                const selectedOption = currentQuestion.querySelector('.answer-option.selected');
                
                if (!selectedOption) {
                    alert("Veuillez sélectionner une réponse");
                    return;
                }
                
                // Masquer la question courante
                currentQuestion.classList.remove('active-question');
                
                // Passer à la question suivante
                currentQuestionIndex++;
                const nextQuestion = document.querySelector(`.question-card[data-question="${currentQuestionIndex}"]`);
                
                if (nextQuestion) {
                    nextQuestion.classList.add('active-question');
                    questionCounter.textContent = `Question ${currentQuestionIndex}/4`;
                    
                    // Activer/désactiver les boutons de navigation
                    prevQuestionBtn.disabled = false;
                    
                    if (currentQuestionIndex === 4) {
                        nextQuestionBtn.style.display = 'none';
                        completeQuestionnaireBtn.style.display = 'block';
                    }
                }
            });
            
            prevQuestionBtn.addEventListener('click', function() {
                // Masquer la question courante
                const currentQuestion = document.querySelector(`.question-card[data-question="${currentQuestionIndex}"]`);
                currentQuestion.classList.remove('active-question');
                
                // Passer à la question précédente
                currentQuestionIndex--;
                const prevQuestion = document.querySelector(`.question-card[data-question="${currentQuestionIndex}"]`);
                
                if (prevQuestion) {
                    prevQuestion.classList.add('active-question');
                    questionCounter.textContent = `Question ${currentQuestionIndex}/4`;
                    
                    // Activer/désactiver les boutons de navigation
                    prevQuestionBtn.disabled = currentQuestionIndex === 1;
                    
                    if (currentQuestionIndex < 4) {
                        nextQuestionBtn.style.display = 'block';
                        completeQuestionnaireBtn.style.display = 'none';
                    }
                }
            });
            
            // Sélection des réponses
            document.querySelectorAll('.answer-option').forEach(option => {
                option.addEventListener('click', function() {
                    // Retirer la sélection de toutes les options de cette question
                    const parent = this.parentElement;
                    parent.querySelectorAll('.answer-option').forEach(opt => {
                        opt.classList.remove('selected');
                    });
                    
                    // Sélectionner cette option
                    this.classList.add('selected');
                    
                    // Enregistrer le score
                    const scoreData = this.getAttribute('data-score');
                    processScoreData(scoreData, currentQuestionIndex);
                });
            });
            
            completeQuestionnaireBtn.addEventListener('click', function() {
                // Vérifier si la dernière question a une réponse sélectionnée
                const lastQuestion = document.querySelector(`.question-card[data-question="4"]`);
                const selectedOption = lastQuestion.querySelector('.answer-option.selected');
                
                if (!selectedOption) {
                    alert("Veuillez sélectionner une réponse à la dernière question");
                    return;
                }
                
                // Déterminer l'émotion dominante
                const dominantEmotion = getDominantEmotion();
                
                // Afficher l'overlay de chargement
                document.getElementById('loading-overlay').classList.add('active');
                
                // Simuler un court délai pour l'analyse émotionnelle
                setTimeout(() => {
                    try {
                        // Générer l'aura
                        const intensity = calculateIntensity();
                        const complexity = 7; // Valeur par défaut
                        const movement = 6; // Valeur par défaut
                        
                        generateAura(dominantEmotion, intensity, complexity, movement);
                        
                        // Revenir au début du questionnaire
                        resetQuestionnaire();
                        
                        // Revenir au mode rapide
                        quickModeBtn.click();
                    } catch (error) {
                        console.error("Erreur lors de la génération de l'aura après questionnaire:", error);
                    } finally {
                        // S'assurer que l'overlay de chargement est toujours masqué même en cas d'erreur
                        document.getElementById('loading-overlay').classList.remove('active');
                    }
                }, 2000);
            });
            
            // Contrôles audio
            playMusicBtn.addEventListener('click', function() {
                if (audioPlayer.src) {
                    audioPlayer.play();
                    playMusicBtn.style.display = 'none';
                    pauseMusicBtn.style.display = 'inline-block';
                } else {
                    alert("Veuillez d'abord générer votre aura");
                }
            });
            
            pauseMusicBtn.addEventListener('click', function() {
                audioPlayer.pause();
                pauseMusicBtn.style.display = 'none';
                playMusicBtn.style.display = 'inline-block';
            });
            
            volumeUpBtn.addEventListener('click', function() {
                if (audioPlayer.volume < 0.9) {
                    audioPlayer.volume += 0.1;
                    audioVolume = audioPlayer.volume;
                }
            });
            
            volumeDownBtn.addEventListener('click', function() {
                if (audioPlayer.volume > 0.1) {
                    audioPlayer.volume -= 0.1;
                    audioVolume = audioPlayer.volume;
                }
            });
            
            // Partage
            shareAuraBtn.addEventListener('click', function() {
                // Basculer la visibilité de la barre de partage sur mobile
                const shareBar = document.querySelector('.social-share-bar');
                
                if (window.innerWidth <= 768) {
                    shareBar.classList.toggle('visible');
                } else {
                    // Sur desktop, montrer temporairement les options de partage
                    shareBar.style.animation = 'pulse 1s ease';
                    setTimeout(() => {
                        shareBar.style.animation = '';
                    }, 1000);
                }
            });
            
            // Fonctions de partage
            document.getElementById('facebook-share').addEventListener('click', function() {
                const url = encodeURIComponent(window.location.href);
                window.open(`https://www.facebook.com/sharer/sharer.php?u=${url}`, '_blank');
            });
            
            document.getElementById('x-share').addEventListener('click', function() {
                const url = encodeURIComponent(window.location.href);
                const text = encodeURIComponent("Découvrez mon aura émotionnelle sur AuraSound !");
                window.open(`https://twitter.com/intent/tweet?text=${text}&url=${url}`, '_blank');
            });
            
            document.getElementById('whatsapp-share').addEventListener('click', function() {
                const url = encodeURIComponent(window.location.href);
                const text = encodeURIComponent("Découvrez mon aura émotionnelle sur AuraSound !");
                window.open(`https://wa.me/?text=${text} ${url}`, '_blank');
            });
            
            document.getElementById('instagram-share').addEventListener('click', function() {
                alert("Pour partager sur Instagram :\n1. Prenez une capture d'écran de votre aura\n2. Ouvrez Instagram\n3. Créez une nouvelle publication ou story\n4. Ajoutez la capture d'écran et partagez l'URL");
            });
            
            document.getElementById('linkedin-share').addEventListener('click', function() {
                const url = encodeURIComponent(window.location.href);
                window.open(`https://www.linkedin.com/sharing/share-offsite/?url=${url}`, '_blank');
            });
            
            document.getElementById('email-share').addEventListener('click', function() {
                const subject = encodeURIComponent("Découvrez mon aura émotionnelle");
                const body = encodeURIComponent("J'ai découvert mon aura émotionnelle sur AuraSound. Découvrez la vôtre : " + window.location.href);
                window.location.href = `mailto:?subject=${subject}&body=${body}`;
            });
            
            document.getElementById('copy-link').addEventListener('click', function() {
                navigator.clipboard.writeText(window.location.href).then(function() {
                    alert("Lien copié dans le presse-papier !");
                }).catch(function() {
                    alert("Erreur lors de la copie du lien.");
                });
            });
            
            // Aide / Tutoriel
            helpButton.addEventListener('click', function() {
                showTutorial();
            });
            
            // Afficher le tutoriel au premier chargement
            if (!localStorage.getItem('tutorialSeen')) {
                setTimeout(showTutorial, 1000);
            }
        });

        // Fonctions d'affichage du tutoriel
        window.currentStep = 1;
        window.totalSteps = 6;

        window.showTutorial = function() {
            const tutorialOverlay = document.getElementById('tutorial-overlay');
            tutorialOverlay.classList.add('active');
            window.setStep(1);
        };

        window.closeTutorial = function() {
            const tutorialOverlay = document.getElementById('tutorial-overlay');
            tutorialOverlay.classList.remove('active');
            localStorage.setItem('tutorialSeen', 'true');
        };

        window.nextStep = function() {
            if (window.currentStep < window.totalSteps) {
                window.setStep(window.currentStep + 1);
            }
        };

        window.prevStep = function() {
            if (window.currentStep > 1) {
                window.setStep(window.currentStep - 1);
            }
        };

        window.setStep = function(step) {
            // Masquer toutes les étapes
            document.querySelectorAll('.tutorial-step').forEach(el => {
                el.classList.remove('active');
            });
            
            // Afficher l'étape actuelle
            document.querySelector(`.tutorial-step[data-step="${step}"]`).classList.add('active');
            
            // Mettre à jour les points de progression
            document.querySelectorAll('.progress-dot').forEach(dot => {
                dot.classList.remove('active');
            });
            document.querySelector(`.progress-dot[data-step="${step}"]`).classList.add('active');
            
            // Mettre à jour l'étape courante
            window.currentStep = step;
        };

        // Fonction pour générer l'aura
        function generateAura(emotion, intensity, complexity, movement) {
            // Stopper les animations précédentes
            animationIntervals.forEach(interval => clearInterval(interval));
            animationIntervals = [];
            
            // Vider le conteneur d'aura
            auraLayers.innerHTML = '';
            
            const config = emotionConfigs[emotion];
            if (!config) return;
            
            // Mettre à jour les informations d'aura
            document.querySelector('.aura-title').textContent = config.name;
            document.querySelector('.aura-description').textContent = config.description;
            
            // Calculer les paramètres en fonction de l'intensité
            const radiusMultiplier = 0.8 + (intensity / 10) * 0.4;
            const layersCount = Math.floor(3 + (complexity / 10) * 5);
            const animationSpeed = 100 - (movement / 10) * 50;
            
            // Créer les dégradés de couleurs
            for (let i = 0; i < config.colors.length; i++) {
                const gradientId = `auraGradient${i}`;
                
                const gradient = document.createElementNS("http://www.w3.org/2000/svg", "radialGradient");
                gradient.setAttribute("id", gradientId);
                gradient.setAttribute("cx", "50%");
                gradient.setAttribute("cy", "50%");
                gradient.setAttribute("r", "50%");
                gradient.setAttribute("fx", "50%");
                gradient.setAttribute("fy", "50%");
                
                const stop1 = document.createElementNS("http://www.w3.org/2000/svg", "stop");
                stop1.setAttribute("offset", "0%");
                stop1.setAttribute("stop-color", config.colors[i]);
                stop1.setAttribute("stop-opacity", "0.8");
                
                const stop2 = document.createElementNS("http://www.w3.org/2000/svg", "stop");
                stop2.setAttribute("offset", "80%");
                stop2.setAttribute("stop-color", config.colors[i]);
                stop2.setAttribute("stop-opacity", "0.5");
                
                const stop3 = document.createElementNS("http://www.w3.org/2000/svg", "stop");
                stop3.setAttribute("offset", "100%");
                stop3.setAttribute("stop-color", config.colors[i]);
                stop3.setAttribute("stop-opacity", "0");
                
                gradient.appendChild(stop1);
                gradient.appendChild(stop2);
                gradient.appendChild(stop3);
                
                const defs = auraSvg.querySelector("defs");
                defs.appendChild(gradient);
            }
            
            // Créer les couches d'aura
            for (let i = 0; i < layersCount; i++) {
                const layerRadius = config.baseRadius * radiusMultiplier * (1 - (i * 0.1));
                const colorIndex = i % config.colors.length;
                const gradientId = `auraGradient${colorIndex}`;
                
                const circle = document.createElementNS("http://www.w3.org/2000/svg", "circle");
                circle.setAttribute("cx", "200");
                circle.setAttribute("cy", "200");
                circle.setAttribute("r", layerRadius);
                circle.setAttribute("fill", `url(#${gradientId})`);
                circle.setAttribute("filter", "url(#glow)");
                circle.setAttribute("opacity", (1 - (i * 0.1)).toFixed(1));
                
                auraLayers.appendChild(circle);
                
                // Ajouter l'animation
                let growing = true;
                let currentRadius = layerRadius;
                const pulseAmount = config.pulseFactor * (intensity / 10);
                const interval = setInterval(() => {
                    if (growing) {
                        currentRadius += 0.5 * pulseAmount;
                        if (currentRadius >= layerRadius * (1 + 0.1 * pulseAmount)) {
                            growing = false;
                        }
                    } else {
                        currentRadius -= 0.5 * pulseAmount;
                        if (currentRadius <= layerRadius * (1 - 0.05 * pulseAmount)) {
                            growing = true;
                        }
                    }
                    circle.setAttribute("r", currentRadius);
                }, animationSpeed + (i * 20));
                
                animationIntervals.push(interval);
            }
            
            // Ajouter des particules aléatoires
            for (let i = 0; i < 20; i++) {
                const angle = Math.random() * Math.PI * 2;
                const distance = 50 + Math.random() * 100;
                const x = 200 + Math.cos(angle) * distance;
                const y = 200 + Math.sin(angle) * distance;
                const size = 2 + Math.random() * 8;
                
                const colorIndex = Math.floor(Math.random() * config.colors.length);
                
                const particle = document.createElementNS("http://www.w3.org/2000/svg", "circle");
                particle.setAttribute("cx", x);
                particle.setAttribute("cy", y);
                particle.setAttribute("r", size);
                particle.setAttribute("fill", config.colors[colorIndex]);
                particle.setAttribute("filter", "url(#glow)");
                particle.setAttribute("opacity", (0.3 + Math.random() * 0.5).toFixed(1));
                
                auraLayers.appendChild(particle);
                
                // Animation des particules
                let particleX = x;
                let particleY = y;
                let dirX = Math.random() * 2 - 1;
                let dirY = Math.random() * 2 - 1;
                
                const particleInterval = setInterval(() => {
                    particleX += dirX * (movement / 20);
                    particleY += dirY * (movement / 20);
                    
                    // Maintenir les particules dans un rayon
                    const dx = particleX - 200;
                    const dy = particleY - 200;
                    const dist = Math.sqrt(dx * dx + dy * dy);
                    
                    if (dist > distance + 30) {
                        // Inverser la direction
                        dirX = -dirX;
                        dirY = -dirY;
                    }
                    
                    particle.setAttribute("cx", particleX);
                    particle.setAttribute("cy", particleY);
                }, 50);
                
                animationIntervals.push(particleInterval);
            }
            
            // Charger et jouer l'audio correspondant
            audioPlayer.pause();
            
            // Simuler le chargement d'un fichier audio (à remplacer par des fichiers réels)
            audioPlayer.src = `https://example.com/audio/${config.musicUrl}`;
            
            // En attendant les vrais fichiers, simuler l'audio avec l'API Web Audio
            simulateAudio(emotion, intensity);
            
            // Mettre à jour l'interface des contrôles audio
            playMusicBtn.style.display = 'none';
            pauseMusicBtn.style.display = 'inline-block';
        }

        // Fonction pour simuler l'audio avec l'API Web Audio (pour démonstration)
        function simulateAudio(emotion, intensity) {
            // Arrêter tout audio précédent
            if (audioPlayer.oscillator) {
                try {
                    audioPlayer.oscillator.stop();
                } catch (e) {}
                audioPlayer.oscillator = null;
            }
            
            if (audioPlayer.mediaSource) {
                try {
                    audioPlayer.mediaSource.disconnect();
                } catch (e) {}
                audioPlayer.mediaSource = null;
            }
            
            // Créer un contexte audio si nécessaire
            if (!window.AudioContext) {
                window.AudioContext = window.webkitAudioContext || window.AudioContext;
            }
            
            try {
                if (!window.auraAudioContext) {
                    window.auraAudioContext = new AudioContext();
                }
                
                const audioContext = window.auraAudioContext;
                
                // Paramètres basés sur l'émotion
                let frequency, waveform, noteInterval;
                
                switch(emotion) {
                    case 'joy':
                        frequency = 440; // A4
                        waveform = 'triangle';
                        noteInterval = 500;
                        break;
                    case 'love':
                        frequency = 396; // G4
                        waveform = 'sine';
                        noteInterval = 800;
                        break;
                    case 'calm':
                        frequency = 329.63; // E4
                        waveform = 'sine';
                        noteInterval = 1200;
                        break;
                    case 'energy':
                        frequency = 523.25; // C5
                        waveform = 'sawtooth';
                        noteInterval = 300;
                        break;
                    case 'focus':
                        frequency = 261.63; // C4
                        waveform = 'sine';
                        noteInterval = 900;
                        break;
                    case 'creativity':
                        frequency = 349.23; // F4
                        waveform = 'triangle';
                        noteInterval = 600;
                        break;
                    case 'sadness':
                        frequency = 293.66; // D4
                        waveform = 'sine';
                        noteInterval = 1500;
                        break;
                    case 'anxiety':
                        frequency = 369.99; // F#4
                        waveform = 'sawtooth';
                        noteInterval = 400;
                        break;
                    case 'anger':
                        frequency = 466.16; // A#4
                        waveform = 'square';
                        noteInterval = 300;
                        break;
                    default:
                        frequency = 440;
                        waveform = 'sine';
                        noteInterval = 800;
                }
                
                // Créer un oscillateur
                const oscillator = audioContext.createOscillator();
                oscillator.type = waveform;
                oscillator.frequency.setValueAtTime(frequency, audioContext.currentTime);
                
                // Créer un gain node pour le volume
                const gainNode = audioContext.createGain();
                gainNode.gain.setValueAtTime(0, audioContext.currentTime);
                gainNode.gain.linearRampToValueAtTime(audioVolume * 0.3, audioContext.currentTime + 0.1);
                
                // Connecter l'oscillateur au gain node puis à la destination
                oscillator.connect(gainNode);
                gainNode.connect(audioContext.destination);
                
                // Démarrer l'oscillateur
                oscillator.start();
                
                // Simuler la lecture de notes pour créer une mélodie
                let playing = true;
                let noteTimeout = null;
                
                function playNote() {
                    if (!playing) return;
                    
                    // Changer la fréquence pour la prochaine note
                    const scale = [frequency, frequency * 1.125, frequency * 1.25, frequency * 1.333, frequency * 1.5, frequency * 1.667, frequency * 1.875, frequency * 2];
                    const nextNote = scale[Math.floor(Math.random() * scale.length)];
                    oscillator.frequency.linearRampToValueAtTime(nextNote, audioContext.currentTime + 0.1);
                    
                    // Programmer la prochaine note
                    noteTimeout = setTimeout(playNote, noteInterval);
                }
                
                playNote();
                
                // Stocker les références pour pouvoir arrêter l'audio
                audioPlayer.mediaSource = gainNode;
                audioPlayer.oscillator = oscillator;
                audioPlayer.noteTimeout = noteTimeout;
                
                audioPlayer.play = function() {
                    playing = true;
                    if (audioPlayer.mediaSource) {
                        audioPlayer.mediaSource.gain.linearRampToValueAtTime(audioVolume * 0.3, audioContext.currentTime + 0.1);
                    }
                    if (!audioPlayer.noteTimeout) {
                        playNote();
                    }
                };
                
                audioPlayer.pause = function() {
                    playing = false;
                    if (audioPlayer.mediaSource) {
                        audioPlayer.mediaSource.gain.linearRampToValueAtTime(0, audioContext.currentTime + 0.5);
                    }
                    if (audioPlayer.noteTimeout) {
                        clearTimeout(audioPlayer.noteTimeout);
                        audioPlayer.noteTimeout = null;
                    }
                };
                
            } catch (e) {
                console.error("Erreur lors de la simulation audio:", e);
                // Assurez-vous que le bouton de lecture est toujours visible même en cas d'erreur
                const playMusicBtn = document.getElementById('play-music');
                const pauseMusicBtn = document.getElementById('pause-music');
                playMusicBtn.style.display = 'inline-block';
                pauseMusicBtn.style.display = 'none';
            }
        }

        // Fonctions pour le questionnaire
        function resetQuestionnaire() {
            // Réinitialiser l'index de question
            currentQuestionIndex = 1;
            
            // Masquer toutes les questions sauf la première
            document.querySelectorAll('.question-card').forEach(question => {
                question.classList.remove('active-question');
            });
            document.querySelector('.question-card[data-question="1"]').classList.add('active-question');
            
            // Désélectionner toutes les options
            document.querySelectorAll('.answer-option').forEach(option => {
                option.classList.remove('selected');
            });
            
            // Réinitialiser les contrôles de navigation
            document.getElementById('prev-question').disabled = true;
            document.getElementById('next-question').style.display = 'block';
            document.getElementById('complete-questionnaire').style.display = 'none';
            
            // Réinitialiser le compteur de questions
            document.querySelector('.question-counter').textContent = 'Question 1/4';
            
            // Réinitialiser les scores
            questionnaireScores = {};
        }

        function processScoreData(scoreData, questionIndex) {
            if (!scoreData) return;
            
            // Analyser les scores (format: "emotion:value,emotion:value")
            const scores = scoreData.split(',');
            scores.forEach(score => {
                const [emotion, value] = score.split(':');
                const scoreValue = parseInt(value);
                
                if (!questionnaireScores[emotion]) {
                    questionnaireScores[emotion] = 0;
                }
                
                // Pondération en fonction de la question
                let weight = 1;
                if (questionIndex === 3) weight = 1.5; // La question sur l'objectif a plus de poids
                
                questionnaireScores[emotion] += scoreValue * weight;
            });
        }

        function getDominantEmotion() {
            // Trouver l'émotion avec le score le plus élevé
            let maxScore = -Infinity;
            let dominantEmotion = 'calm'; // Par défaut
            
            Object.keys(questionnaireScores).forEach(emotion => {
                if (questionnaireScores[emotion] > maxScore) {
                    maxScore = questionnaireScores[emotion];
                    dominantEmotion = emotion;
                }
            });
            
            return dominantEmotion;
        }

        function calculateIntensity() {
            // Calculer l'intensité en fonction des scores totaux
            let totalScore = 0;
            
            Object.values(questionnaireScores).forEach(score => {
                totalScore += Math.abs(score);
            });
            
            // Normaliser pour obtenir une valeur entre 1 et 10
            return Math.min(10, Math.max(1, Math.round(totalScore / 5)));
        }
    </script>
</body>
</html>
